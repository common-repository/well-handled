<?php
 namespace blobfolio\wp\wh\vendor\phone; use \blobfolio\wp\wh\vendor\common\constants; use \blobfolio\wp\wh\vendor\common\data as c_data; use \blobfolio\wp\wh\vendor\common\ref\cast as r_cast; use \blobfolio\wp\wh\vendor\common\ref\sanitize as r_sanitize; class phone { const TYPES = array( 'fixed', 'mobile', 'pager', 'personal_number', 'premium_rate', 'shared_cost', 'toll_free', 'uan', 'voicemail', 'voip', ); const MIN_LENGTH = 3; const MAX_LENGTH = 30; const TEMPLATE = array( 'country'=>'', 'prefix'=>0, 'region'=>'', 'types'=>array(), 'number'=>'', ); const DEFAULT_REGION = 'US'; protected $phone = false; protected $tried = array(); public function __construct($phone='', string $country='') { r_cast::string($phone, true); $this->phone = false; static::sanitize_phone($phone); if (! $phone) { return false; } static::sanitize_country($country); if (! $country) { $country = 'US'; } if (false === $this->match($phone, $country)) { $func = "\\blobfolio\\wp\\wh\\vendor\\phone\\data\\data$country"; @require_once __DIR__ . "/data/src/data$country.txt"; if (false === $this->match($phone, data\prefixes::PREFIXES[$func::PREFIX])) { if ( $func::REGION && $this->match($phone, data\prefixes::REGIONS[$func::REGION]) ) { return true; } } else { return true; } } else { return true; } return $this->match($phone, data\prefixes::COUNTRIES); } protected function match($phone='', $countries=array()) { r_cast::string($phone, true); r_cast::array($countries); foreach ($countries as $c) { if (! $c || ! \is_string($c) || isset($this->tried[$c])) { continue; } $this->tried[$c] = true; $func = "\\blobfolio\\wp\\wh\\vendor\\phone\\data\\data$c"; @require_once __DIR__ . "/data/src/data$c.txt"; if (false !== ($tmp = $func::match($phone))) { $this->phone = $tmp; return true; } } return false; } public function __toString() { return $this->is_phone() ? $this->phone['number'] : ''; } public function is_phone($type=null) { if (! \is_null($type)) { r_cast::array($type); foreach ($type as $k=>$v) { if (\is_string($type[$k])) { $type[$k] = \strtolower($type[$k]); } if (! $type[$k]) { unset($type[$k]); } } if (! \count($type)) { $type = null; } } return ( (false !== $this->phone) && (\is_null($type) || \count(\array_intersect($type, $this->phone['types']))) ); } public function get_data($key=null) { if (! $this->is_phone()) { return false; } if (\is_string($key)) { $key = \strtolower($key); return $this->phone[$key] ?? false; } return $this->phone; } public static function sanitize_phone(&$phone = '') { r_cast::string($phone, true); $from = \array_keys(constants::NUMBER_CHARS); $to = \array_values(constants::NUMBER_CHARS); $phone = \str_replace($from, $to, $phone); $phone = \preg_replace('/[^\d]/', '', $phone); if (! c_data::length_in_range($phone, static::MIN_LENGTH, static::MAX_LENGTH)) { $phone = false; } return true; } public static function sanitize_country(string &$country='') { r_sanitize::country($country); if ( ! $country || ! \in_array($country, data\prefixes::COUNTRIES, true) ) { $country = false; } return true; } } 