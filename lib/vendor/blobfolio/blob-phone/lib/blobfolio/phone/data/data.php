<?php
 namespace blobfolio\wp\wh\vendor\phone\data; use \blobfolio\wp\wh\vendor\phone\phone; abstract class data { public static function match($phone='') { if (! \is_string($phone)) { if (\is_numeric($phone)) { $phone = (string) $phone; } else { return false; } } phone::sanitize_phone($phone); if (false === $phone) { return false; } $test = array($phone); $tmp = \ltrim($phone, '0'); if (0 === \strpos($tmp, \strval(static::PREFIX))) { $test[] = \substr($tmp, \strlen(static::PREFIX)); } foreach ($test as $t) { foreach (static::PATTERNS as $p) { if (\preg_match("/^($p)$/", $t)) { $types = static::types($t); if (! \count($types)) { continue; } $out = phone::TEMPLATE; $out['country'] = static::CODE; $out['prefix'] = static::PREFIX; $out['region'] = static::REGION; $out['types'] = $types; $out['number'] = '+' . static::PREFIX . ' ' . static::format($t); return $out; } } } return false; } protected static function format(string $phone='') { foreach (static::FORMATS as $k=>$v) { if (\preg_match("/^($k)$/", $phone)) { return \preg_replace("/^$k$/", $v, $phone); } } return $phone; } protected static function types(string $phone='') { $out = array(); foreach (static::TYPES as $k=>$v) { if (\preg_match("/^($k)$/", $phone)) { $out = \array_merge($out, $v); } } if (\count($out)) { $out = \array_unique($out); \sort($out); } return $out; } } 