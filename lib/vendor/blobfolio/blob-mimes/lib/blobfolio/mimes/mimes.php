<?php
 namespace blobfolio\wp\wh\vendor\mimes; use \blobfolio\wp\wh\vendor\common\data as c_data; use \blobfolio\wp\wh\vendor\common\ref\cast as r_cast; use \blobfolio\wp\wh\vendor\common\ref\file as r_file; use \blobfolio\wp\wh\vendor\common\ref\sanitize as r_sanitize; use \blobfolio\wp\wh\vendor\common\sanitize as v_sanitize; class mimes { const MIME_DEFAULT = 'application/octet-stream'; const MIME_EMPTY = 'inode/x-empty'; public static function get_mimes() { return data::BY_MIME; } public static function get_mime(string $mime='') { r_sanitize::mime($mime); if (isset(data::BY_MIME[$mime])) { return data::BY_MIME[$mime]; } $loose = \array_diff(static::get_loose_mimes($mime), array($mime)); foreach ($loose as $v) { if (isset(data::BY_MIME[$v])) { return data::BY_MIME[$v]; } } return false; } public static function get_extensions() { return data::BY_EXT; } public static function get_extension(string $ext='') { r_sanitize::file_extension($ext); return data::BY_EXT[$ext] ?? false; } public static function check_ext_and_mime(string $ext='', string $mime='', bool $soft=true) { r_sanitize::file_extension($ext); if (! $ext) { return false; } r_sanitize::mime($mime); if ( ! $mime || (static::MIME_EMPTY === $mime) || ($soft && (static::MIME_DEFAULT === $mime)) ) { return true; } if (false === ($ext = static::get_extension($ext))) { return $soft; } $real = $ext['mime']; $found = \array_intersect($real, static::get_loose_mimes($mime)); return \count($found) > 0; } public static function get_loose_mimes(string $mime) { r_sanitize::mime($mime); $out = array(); if (! $mime) { return $out; } $out[] = $mime; if ((static::MIME_EMPTY === $mime) || (static::MIME_DEFAULT === $mime)) { return $out; } if (0 === \strpos($mime, 'application/cdfv2')) { $out[] = 'application/vnd.ms-office'; } list($type, $subtype) = \explode('/', $mime); if ($type && $subtype) { $subtype = \preg_replace('/^(x\-|vnd.)/', '', $subtype); $out[] = "$type/x-$subtype"; $out[] = "$type/vnd.$subtype"; $out[] = "$type/$subtype"; } $out = \array_unique($out); \usort($out, function($a, $b) { $a_key = (! \preg_match('#/(x\-|vnd\.)#', $a) ? '0_' : '1_') . $a; $b_key = (! \preg_match('#/(x\-|vnd\.)#', $b) ? '0_' : '1_') . $b; return $a_key < $b_key ? -1 : 1; }); return $out; } public static function finfo($path='', $nice=null) { r_cast::string($path, true); if (! \is_null($nice)) { r_cast::string($nice, true); } $out = array( 'dirname'=>'', 'basename'=>'', 'extension'=>'', 'filename'=>'', 'path'=>'', 'mime'=>static::MIME_DEFAULT, 'suggested_filename'=>array(), ); if ( (false === \strpos($path, '.')) && (false === \strpos($path, '/')) && (false === \strpos($path, '\\')) ) { $out['extension'] = v_sanitize::file_extension($path); if (false !== ($ext = static::get_extension($path))) { $out['mime'] = $ext['mime'][0]; } return $out; } r_file::path($path, false); $out['path'] = $path; $out = c_data::parse_args(\pathinfo($path), $out); if (! \is_null($nice)) { $pathinfo = \pathinfo($nice); $out['filename'] = $pathinfo['filename'] ?? ''; $out['extension'] = $pathinfo['extension'] ?? ''; } r_sanitize::file_extension($out['extension']); if (false !== ($ext = static::get_extension($out['extension']))) { $out['mime'] = $ext['mime'][0]; } try { if (false !== ($path = @\realpath($path))) { $out['path'] = $path; $out['dirname'] = \dirname($path); } if ( (false !== $path) && \function_exists('finfo_file') && \defined('FILEINFO_MIME_TYPE') && @\is_file($path) && @\filesize($path) > 0 ) { $finfo = \finfo_open(\FILEINFO_MIME_TYPE); $magic_mime = v_sanitize::mime(\finfo_file($finfo, $path)); \finfo_close($finfo); if ( ('svg' === $out['extension']) && ('image/svg+xml' !== $magic_mime) ) { $tmp = @\file_get_contents($path); if ( \is_string($tmp) && (false !== \strpos(\strtolower($tmp), '<svg')) ) { $magic_mime = 'image/svg+xml'; } } if ( $magic_mime && (static::MIME_DEFAULT !== $magic_mime) && ( (static::MIME_DEFAULT === $out['mime']) || (0 !== \strpos($magic_mime, 'text/')) ) && ! static::check_ext_and_mime($out['extension'], $magic_mime) ) { if (false !== ($mime = static::get_mime($magic_mime))) { $out['mime'] = $magic_mime; $out['extension'] = $mime['ext'][0]; foreach ($mime['ext'] as $ext) { $out['suggested_filename'][] = "{$out['filename']}.$ext"; } } } } } catch (\Throwable $e) { return $out; } return $out; } } 